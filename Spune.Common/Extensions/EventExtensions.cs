//--------------------------------------------------------------------------------------------------
// <copyright company="NHL Stenden">
//     Author: Martin Bosgra
//     Copyright Â© NHL Stenden. All rights reserved.
// </copyright>
//--------------------------------------------------------------------------------------------------

using Spune.Common.Handlers;

namespace Spune.Common.Extensions;

/// <summary>
/// Provides extension methods for event handling.
/// </summary>
public static class EventExtensions
{
    /// <summary>
    /// Invokes each event handler in the invocation list asynchronously and waits for all handlers to complete.
    /// </summary>
    /// <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
    /// <param name="obj">The event handler delegate to invoke.</param>
    /// <param name="sender">The source of the event.</param>
    /// <param name="e">An object that contains the event data.</param>
    /// <returns>A task that represents the asynchronous operation.</returns>
    public static async Task InvokeAsync<TEventArgs>(this AsyncEventHandler<TEventArgs> obj, object sender, TEventArgs e)
    {
        var invocationList = obj.GetInvocationList();
        var tasks = new Task[invocationList.Length];
        for (var i = 0; i < invocationList.Length; i++)
            tasks[i] = ((AsyncEventHandler<TEventArgs>)invocationList[i])(sender, e);
        await Task.WhenAll(tasks);
    }
}
